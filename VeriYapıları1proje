Verilen dizi: [22, 27, 16, 2, 18, 6]

Adım:

Dizi: [22] (Başlangıçta, ilk elemanı ayrı bir sıralı alt dizi olarak kabul ediyoruz.)
Kalan dizi: [27, 16, 2, 18, 6]
Adım:

Dizi: [22, 27] (27, önceki sıralı alt dizideki elemanla karşılaştırılır ve doğru konuma yerleştirilir.)
Kalan dizi: [16, 2, 18, 6]
Adım:

Dizi: [16, 22, 27] (16, önceki sıralı alt dizideki elemanlarla karşılaştırılır ve doğru konuma yerleştirilir.)
Kalan dizi: [2, 18, 6]
Adım:

Dizi: [2, 16, 22, 27] (2, önceki sıralı alt dizideki elemanlarla karşılaştırılır ve doğru konuma yerleştirilir.)
Kalan dizi: [18, 6]
Adım:

Dizi: [2, 16, 18, 22, 27] (18, önceki sıralı alt dizideki elemanlarla karşılaştırılır ve doğru konuma yerleştirilir.)
Kalan dizi: [6]
Adım:

Dizi: [2, 6, 16, 18, 22, 27] (6, önceki sıralı alt dizideki elemanlarla karşılaştırılır ve doğru konuma yerleştirilir.)
Kalan dizi: []
Dizi sıralandıktan sonra:
Sıralı Dizi: [2, 6, 16, 18, 22, 27]

Insertion Sort'un zaman karmaşıklığı (Time Complexity) O(n^2)’dir.

Dizi içerisindeki 18 sayısı "Average case" (Ortalama durum) altına girer. Bu, aradığınız sayının dizinin ortasında olduğu durumu ifade eder. Insertion Sort'un ortalama durum zaman karmaşıklığı O(n^2) olduğu için aradığınız sayının ortada olması bu karmaşıklığa uygun bir durumdur.


Verilen dizi: [22, 27, 16, 2, 18, 6] ->Selection Sort

Adım 1:
Dizi: [7, 3, 5, 8, 2, 9, 4, 15, 6]
En küçük öğe: 2 (Dizideki en küçük öğe)

Dizi: [2, 3, 5, 8, 7, 9, 4, 15, 6]

Adım 2:
Dizi: [2, 3, 5, 8, 7, 9, 4, 15, 6]
En küçük öğe: 3 (Dizideki en küçük ikinci öğe)

Dizi: [2, 3, 5, 8, 7, 9, 4, 15, 6]

Adım 3:
Dizi: [2, 3, 5, 8, 7, 9, 4, 15, 6]
En küçük öğe: 4 (Dizideki en küçük üçüncü öğe)

Dizi: [2, 3, 4, 8, 7, 9, 5, 15, 6]

Adım 4:
Dizi: [2, 3, 4, 8, 7, 9, 5, 15, 6]
En küçük öğe: 5 (Dizideki en küçük dördüncü öğe)

Dizi: [2, 3, 4, 5, 7, 9, 8, 15, 6]
